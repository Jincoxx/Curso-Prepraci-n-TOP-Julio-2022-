Solucion 10

function order(n = [], reverse) {
    if (reverse == true) {
        n.sort(function (a, b) { return a - b; })
        n.reverse();
        console.log(n);
    } else {
        n.sort(function (a, b) { return a - b; })
        console.log(n);
    }
}
order([1, 2, 3], true) //=> [3, 2, 1]
order([5, 2, 1, 3, 4]) //=> [1, 2, 3, 4, 5]

Solucion 11

function max(n = []) {
    n.sort(function (a, b) { return a - b; })
    console.log(n[n.length - 1])
}
max([1, 2, 3, 4]) // => 4
max([63, 85, 39, 24, 3]) // => 85

Solucion 12

function pattern(n) {
    let resultado = [];
    let string = "";
    for (let i = n; i > 0; i--) {
        string = i + string;
        resultado.push(string);
    }
    return resultado.reverse().join("\n");
}
pattern(4)

1234
234
34
4
pattern(6)

123456
23456
3456
456
56
6
